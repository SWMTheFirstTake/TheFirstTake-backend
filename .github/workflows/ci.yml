name: Spring Boot CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    env:
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_ENDPOINT: ${{ secrets.POSTGRES_ENDPOINT }}
      LLM_SERVER_HOST: ${{ secrets.LLM_SERVER_HOST }}
      LLM_SERVER_PORT: ${{ secrets.LLM_SERVER_PORT }}
      AI_SERVER_HOST: ${{ secrets.AI_SERVER_HOST }}
      AI_SERVER_PORT: ${{ secrets.AI_SERVER_PORT }}
      REDIS_ENDPOINT: ${{ secrets.REDIS_ENDPOINT }}
      AWS_ACCESS_KEY: ${{secrets.AWS_ACCESS_KEY}}
      AWS_SECRET_KEY: ${{secrets.AWS_SECRET_KEY}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x ./thefirsttake/gradlew

      - name: Build
        run: cd thefirsttake && ./gradlew clean build

      - name: Upload build artifact for deployment
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: thefirsttake/build/libs/*.jar

  deploy:
    needs: build-and-test
    runs-on: ubuntu-latest

    env:
      SERVER_IP: ${{ secrets.SERVER_IP }}
      SERVER_USER: ${{ secrets.SERVER_USER }}
      SERVER_SSH_KEY: ${{ secrets.SERVER_SSH_KEY }}
      LLM_SERVER_HOST: ${{ secrets.LLM_SERVER_HOST }}
      LLM_SERVER_PORT: ${{ secrets.LLM_SERVER_PORT }}
      AI_SERVER_HOST: ${{ secrets.AI_SERVER_HOST }}
      AI_SERVER_PORT: ${{ secrets.AI_SERVER_PORT }}
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
      POSTGRES_ENDPOINT: ${{ secrets.POSTGRES_ENDPOINT }}
      REDIS_ENDPOINT: ${{ secrets.REDIS_ENDPOINT }}
      AWS_ACCESS_KEY: ${{secrets.AWS_ACCESS_KEY}}
      AWS_SECRET_KEY: ${{secrets.AWS_SECRET_KEY}}

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: ./deploy

      - name: Copy jar to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          source: "./deploy/*.jar"
          target: "/home/${{ env.SERVER_USER }}/app/"

      - name: Restart app on server
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ env.SERVER_IP }}
          username: ${{ env.SERVER_USER }}
          key: ${{ env.SERVER_SSH_KEY }}
          script: |
            # 애플리케이션 JAR 파일의 이름을 찾습니다.
            # 이 스크립트는 /home/${{ env.SERVER_USER }}/app/ 디렉토리에 JAR 파일이 하나만 있다고 가정합니다.
            JAR_NAME=$(ls /home/${{ env.SERVER_USER }}/app/deploy/*.jar | head -n 1)
            
            # 기존 서비스가 있다면 중지합니다.
            # '|| true'는 서비스가 실행 중이 아니어도 오류를 발생시키지 않도록 합니다.
            sudo systemctl stop thefirsttake.service || true

            # systemd 서비스 파일을 생성하거나 업데이트합니다.
            sudo bash -c 'cat > /etc/systemd/system/thefirsttake.service << EOF
[Unit]
Description=TheFirstTake Spring Boot Application
After=network.target

[Service]
Type=simple
User=${{ env.SERVER_USER }}
WorkingDirectory=/home/${{ env.SERVER_USER }}/app
ExecStart=/usr/bin/java -jar /home/${{ env.SERVER_USER }}/app/deploy/*.jar
Restart=always
RestartSec=10

# 환경 변수 설정
Environment="SPRING_DATASOURCE_URL=jdbc:postgresql://${{ secrets.POSTGRES_ENDPOINT }}:5432/postgres?sslmode=require"
Environment="SPRING_DATASOURCE_USERNAME=${{ secrets.POSTGRES_USER }}"
Environment="SPRING_DATASOURCE_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}"
Environment="SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.postgresql.Driver"
Environment="LLM_SERVER_HOST=${{ secrets.LLM_SERVER_HOST }}"
Environment="LLM_SERVER_PORT=${{ secrets.LLM_SERVER_PORT }}"
Environment="AI_SERVER_HOST=${{ secrets.AI_SERVER_HOST }}"
Environment="AI_SERVER_PORT=${{ secrets.AI_SERVER_PORT }}"
Environment="REDIS_ENDPOINT=${{ secrets.REDIS_ENDPOINT }}"
Environment="AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}"
Environment="AWS_SECRET_KEY=${{ secrets.AWS_SECRET_KEY }}"

[Install]
WantedBy=multi-user.target
EOF'

            # systemd 데몬을 리로드하여 새로운 서비스 파일을 인식하게 합니다.
            sudo systemctl daemon-reload
            
            # 기존 방식 (주석 처리) - 필요시 주석 해제하여 사용 가능
            # systemd 서비스를 통해 환경 변수를 설정합니다.
            # 이 환경 변수들은 thefirsttake.service 파일의 ExecStart 명령에 사용됩니다.
            # sudo systemctl set-environment SPRING_DATASOURCE_URL="jdbc:postgresql://${{ secrets.POSTGRES_ENDPOINT }}:5432/postgres?sslmode=require"
            # sudo systemctl set-environment SPRING_DATASOURCE_USERNAME="${{ secrets.POSTGRES_USER }}"
            # sudo systemctl set-environment SPRING_DATASOURCE_PASSWORD="${{ secrets.POSTGRES_PASSWORD }}"
            # sudo systemctl set-environment SPRING_DATASOURCE_DRIVER_CLASS_NAME="org.postgresql.Driver"
            # sudo systemctl set-environment LLM_SERVER_HOST="${{ secrets.LLM_SERVER_HOST }}"
            # sudo systemctl set-environment LLM_SERVER_PORT="${{ secrets.LLM_SERVER_PORT }}"
            # sudo systemctl set-environment AI_SERVER_HOST="${{ secrets.AI_SERVER_HOST }}"
            # sudo systemctl set-environment AI_SERVER_PORT="${{ secrets.AI_SERVER_PORT }}"
            # sudo systemctl set-environment REDIS_ENDPOINT="${{ secrets.REDIS_ENDPOINT }}"
            
            # 서비스를 활성화하고 시작합니다.
            # 'enable'은 시스템 부팅 시 서비스가 자동으로 시작되도록 설정합니다.
            # 'start'는 서비스를 즉시 시작합니다.
            sudo systemctl enable thefirsttake.service
            sudo systemctl start thefirsttake.service
            
            # 서비스 상태를 확인하여 성공적으로 시작되었는지 확인합니다.
            # --no-pager 옵션은 출력이 페이지네이션되지 않도록 합니다.
            # 이 명령은 서비스가 시작될 때까지 기다릴 수 있습니다.
            sudo systemctl status thefirsttake.service --no-pager
